{"version":3,"file":"static/js/76.a0d195d5.chunk.js","mappings":"2WAGAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAY,mCAAG,WAAMC,GAAN,kGAEDH,EAAAA,EAAAA,IAAU,mBAFT,gBAEhBI,EAFgB,EAEhBA,KACRD,EAAQC,EAAKC,SAHW,gDAKxBC,EAAAA,GAAAA,MAAY,KAAMC,SALM,yDAAH,sDASZC,EAAY,mCAAG,WAAML,GAAN,kGAEDH,EAAAA,EAAAA,IAAU,qBAFT,gBAEhBI,EAFgB,EAEhBA,KACRD,EAAQC,EAAKK,QAHW,gDAKxBH,EAAAA,GAAAA,MAAY,KAAMC,SALM,yDAAH,sDASZG,EAAgB,mCAAG,+GAELV,EAAAA,EAAAA,IAAU,sBAAuB,CACtDW,OAAQ,CACNC,KAAM,KAJkB,uBAEpBR,EAFoB,EAEpBA,KAFoB,kBAOrBA,GAPqB,gCAS5BE,EAAAA,GAAAA,MAAY,KAAMC,SATU,yDAAH,qDAahBM,EAAe,mCAAG,WAAMC,GAAN,kGAEJd,EAAAA,EAAAA,IAAU,gBAAiB,CAChDW,OAAQ,CACNG,MAAAA,KAJuB,uBAEnBV,EAFmB,EAEnBA,KAFmB,kBAOpBA,GAPoB,gCAS3BE,EAAAA,GAAAA,MAAY,KAAMC,SATS,yDAAH,sDAafQ,EAAY,mCAAG,WAAMC,GAAN,kGAEDhB,EAAAA,EAAAA,IAAA,iBAAoBgB,IAFnB,uBAEhBZ,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,gCAKxBE,EAAAA,GAAAA,MAAY,KAAMC,SALM,yDAAH,sDASZU,EAAU,mCAAG,WAAMD,GAAN,kGAEChB,EAAAA,EAAAA,IAAA,iBAAoBgB,EAApB,aAFD,uBAEdZ,EAFc,EAEdA,KAFc,kBAGfA,GAHe,gCAKtBE,EAAAA,GAAAA,MAAY,KAAMC,SALI,yDAAH,sDASVW,EAAO,mCAAG,WAAMF,GAAN,kGAEIhB,EAAAA,EAAAA,IAAA,iBAAoBgB,EAApB,aAFJ,uBAEXZ,EAFW,EAEXA,KAFW,kBAGZA,GAHY,gCAKnBE,EAAAA,GAAAA,MAAY,KAAMC,SALC,yDAAH,qD,+GCrEpB,GAAgB,cAAgB,4BAA4B,SAAW,uBAAuB,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,wBAAwB,OAAS,sB,SCGxO,SAASY,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAOR,IANAE,EAAAA,EAAAA,YAAU,WACHF,IACLL,EAAAA,EAAAA,IAAQK,GAAIG,MAAK,SAAAC,GACfL,EAAQK,EAAKN,KACd,GACF,GAAE,CAACE,KACCF,EACH,OAAO,KAET,IAAMO,IAAWP,EAAKQ,OACtB,OACE,8BACGD,GACC,eAAIE,UAAWC,EAAAA,cAAf,SACGV,EAAKW,KAAI,YAAqD,IAAlDT,EAAiD,EAAjDA,GAAIU,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC5C,OACE,gBAAIL,UAAWC,EAAAA,UAAf,WACE,gBAAKD,UAAWC,EAAAA,SAAhB,UACE,gBACED,UAAWC,EAAAA,MACXK,IACEH,EAAY,yCAC0BA,GAClC,+DAENI,IAAKH,OAGT,iBAAKJ,UAAWC,EAAAA,UAAhB,WACE,cAAGD,UAAWC,EAAAA,UAAd,SAA8BG,KAC9B,cAAGJ,UAAWC,EAAAA,UAAd,SAA8BI,SAdCZ,EAkBtC,OAGH,cAAGO,UAAWC,EAAAA,OAAd,gCAIP,C","sources":["components/API/fetch.js","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: 'fcf8166cc673f1c39affaebc2a2648bc',\n};\n\nexport const getAllMovies = async onFetch => {\n  try {\n    const { data } = await axios.get('/discover/movie');\n    onFetch(data.results);\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getAllGenres = async onFetch => {\n  try {\n    const { data } = await axios.get('/genre/movie/list');\n    onFetch(data.genres);\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getTrendingMovie = async () => {\n  try {\n    const { data } = await axios.get('/trending/movie/day', {\n      params: {\n        page: 1,\n      },\n    });\n    return data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const { data } = await axios.get('/search/movie', {\n      params: {\n        query,\n      },\n    });\n    return data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getMovieInfo = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}`);\n    return data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getReviews = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}/reviews`);\n    return data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const getCast = async movie_id => {\n  try {\n    const { data } = await axios.get(`/movie/${movie_id}/credits`);\n    return data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"castContainer\":\"Cast_castContainer__NIXqj\",\"actorImg\":\"Cast_actorImg__T6qL2\",\"actorItem\":\"Cast_actorItem__fXEWx\",\"ActorInfo\":\"Cast_ActorInfo__hn1gA\",\"actorName\":\"Cast_actorName__XabVA\",\"actorChar\":\"Cast_actorChar__VY6Sx\",\"noCast\":\"Cast_noCast__SInMN\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCast } from 'components/API/fetch';\nimport css from './Cast.module.css';\nexport default function Cast() {\n  const [cast, setCast] = useState(null);\n  const { id } = useParams();\n  useEffect(() => {\n    if (!id) return;\n    getCast(id).then(info => {\n      setCast(info.cast);\n    });\n  }, [id]);\n  if (!cast) {\n    return null;\n  }\n  const isCast = !!cast.length;\n  return (\n    <>\n      {isCast ? (\n        <ul className={css.castContainer}>\n          {cast.map(({ id, profile_path, original_name, character }) => {\n            return (\n              <li className={css.actorItem} key={id}>\n                <div className={css.actorImg}>\n                  <img\n                    className={css.image}\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                        : 'https://www.drupal.org/files/project-images/broken-image.jpg'\n                    }\n                    alt={original_name}\n                  />\n                </div>\n                <div className={css.ActorInfo}>\n                  <p className={css.actorName}>{original_name}</p>\n                  <p className={css.actorChar}>{character}</p>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className={css.noCast}>There is no cast!</p>\n      )}\n    </>\n  );\n}\n"],"names":["axios","api_key","getAllMovies","onFetch","data","results","toast","message","getAllGenres","genres","getTrendingMovie","params","page","getMovieByQuery","query","getMovieInfo","movie_id","getReviews","getCast","Cast","useState","cast","setCast","id","useParams","useEffect","then","info","isCast","length","className","css","map","profile_path","original_name","character","src","alt"],"sourceRoot":""}